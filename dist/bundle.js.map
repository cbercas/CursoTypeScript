{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;AAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACA,uDAAuD;AACvD;AACA;AACA;AACA,0MAA0M,cAAc;AACxN,8BAA8B,sBAAsB;AACpD,0BAA0B,YAAY,sBAAsB,qCAAqC,2CAA2C,MAAM;AAClJ,4BAA4B,MAAM,iBAAiB,YAAY;AAC/D,uBAAuB;AACvB,8BAA8B;AAC9B,6BAA6B;AAC7B,4BAA4B;AAC5B;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D;AACA;AACA,yBAAyB;AACzB,2BAA2B;AAC3B,mBAAmB;AACnB,WAAW;AACX;AACA;AACA;AACA;AACA,oBAAoB,OAAO,IAAI;AAC/B;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,wCAAwC;AAC5E;AACA;AACA;AACA,eAAe,YAAY,EAAE,WAAW;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,kCAAkC;AACnC;AACA,oDAAoD,gBAAgB;AACpE,eAAe;AACf,eAAe;AACf,eAAe;AACf,eAAe;AACf,eAAe;AACf,kBAAkB;AAClB;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,eAAe,yCAAyC,eAAe;AACtH;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB,eAAe,iBAAiB;AACrE;AACA;AACA,mBAAmB,kBAAkB,eAAe,iBAAiB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,gBAAgB,8BAA8B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,iBAAiB;AAC5D;AACA;AACA,EAAE;AACF,2CAA2C,iBAAiB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,YAAY,EAAE,SAAS;AACnD;AACA;AACA,4BAA4B,YAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,iBAAiB;AACtD;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B,kBAAkB,8BAA8B,QAAQ;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,eAAe,QAAQ,IAAI,aAAa;AAC1E;AACA;AACA;AACA;AACA,uCAAuC,eAAe,aAAa,KAAK;AACxE,iCAAiC,8BAA8B,cAAc,iBAAiB,cAAc,sBAAsB,iBAAiB;AACnJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;;AAEhC;AACA,sBAAsB,8CAA8C;;AAEpE;;AAEA,gBAAgB,6CAA6C;;AAE7D;AACA;AACA,iCAAiC,EAAE;AACnC;;AAEA;;AAEA;AACA,qBAAqB,MAAM;AAC3B,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,aAAa;AACrC;AACA;AACA;AACA,KAAK;AACL;AACA,0EAA0E,KAAK;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,wCAAwC,4BAA4B;AACpE;AACA;AACA;AACA;AACA;AACA,qBAAqB,OAAO,EAAE,KAAK;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,iDAAiD,uBAAuB;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,qBAAqB;AACrB,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,sBAAsB;AAClD;AACA;AACA,KAAK;AACL;AACA;AACA,4BAA4B,aAAa,OAAO,eAAe,YAAY,IAAI,oBAAoB,MAAM,oCAAoC,MAAM,OAAO;AAC1J,4BAA4B,aAAa,OAAO,0BAA0B;AAC1E;AACA,yBAAyB,OAAO;AAChC;AACA,6BAA6B,SAAS;AACtC;AACA;AACA,6BAA6B,KAAK;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D,gDAAgD;AAChD,uDAAuD;;;;;;;;UE/bvD;UACA;UACA;UACA;UACA","sources":["webpack://cursotypescript/./src/index.ts","webpack://cursotypescript/webpack/before-startup","webpack://cursotypescript/webpack/startup","webpack://cursotypescript/webpack/after-startup"],"sourcesContent":["\"use strict\";\n// Tipos de datos\n/**\n * string\n * number - enteros y decimales\n * boolean - true / false\n * null\n * undefined\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }\nvar __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n    function fulfill(value) { resume(\"next\", value); }\n    function reject(value) { resume(\"throw\", value); }\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Existe también el tipo any pero se supone que esta prohibido\n// Tipos de variables\nvar nombre = \"Cristina\"; // Variable global\nlet apellido = \"Bermudez\"; // Variable local\nconst PI = 3.1415; // Constante (Nunca cambia)\n// PI = 2; // Si descomentas esto, veras el error de la constante\n//imprimir por consola\n// Formas de concatenar un Print\nconsole.log(\"Hola \" + nombre + \" \" + apellido);\nconsole.log(\"Hola \" + nombre, apellido);\nconsole.log(`Hola ${nombre}`); // Son tildes francesas, no comillas simples\n// Declarar varias variables en una línea\nlet a = \"ABCD\", b = 2, c = false;\n// Array de datos   \nlet alumnos = [\"Juan\", \"Jose\", \"Alex\"];\n// Array de datos de 3 tipos\nlet valores = [3, \"Hola\", 2, true]; //No tiene porque estar ordenado los datos dentro del array según los tipos declarados\n// Forma de juntar 2 arrays en un array e incluso agregar\nlet alumnos1A = [\"Juan\", \"Pedro\", \"Fran\"];\nlet alumnos2A = [\"Jose\"];\nlet alumnosTodos = [...alumnos1A, ...alumnos2A, \"Pablo\"];\nconsole.log(alumnosTodos);\n/***\n * Creación de un objeto compuesto por datos primitivos\n */\nlet misDatos = {\n    nombre: \"Cris\",\n    apellidos: \"Bermudez\",\n    edad: 29\n};\n//Propagación de la variable misDatos\nlet configuracion = Object.assign({ versionTS: \"Es6\", versionCodido: \"1.0\" }, misDatos);\n// Declaración y Asignación 1 a 1\nlet propiedad1 = configuracion.versionTS;\nlet propiedad2 = configuracion.versionCodido;\nconsole.log(`${propiedad1} ${propiedad2}`);\n/**\n * Enumerados : permite definir un conjunto de constantes bajo un identificador.\n * Si imprimimos el valor de un valor del enumerado observaremos que\n * lo que almacena es el un valor numérico.\n *\n */\nvar EstadoTarea;\n(function (EstadoTarea) {\n    EstadoTarea[\"Pendiente\"] = \"P\";\n    EstadoTarea[\"Enproceso\"] = \"E\";\n    EstadoTarea[\"Terminado\"] = \"T\";\n})(EstadoTarea || (EstadoTarea = {}));\nlet estadoPendiente = EstadoTarea.Enproceso;\nconsole.log(`El valor del enumerado Pendiente es: ${estadoPendiente}`);\nlet tarea1 = { nombre: \"Tarea1\", prioridad: 2, estado: EstadoTarea.Enproceso };\nlet tarea2 = { nombre: \"Tarea2\", prioridad: 2, estado: EstadoTarea.Enproceso };\nlet tarea3 = { nombre: \"Tarea3\", prioridad: 2, estado: EstadoTarea.Enproceso };\nlet tarea4 = { nombre: \"Tarea4\", prioridad: 2, estado: EstadoTarea.Enproceso };\nlet tarea5 = { nombre: \"Tarea5\", prioridad: 2, estado: EstadoTarea.Enproceso };\nlet empleado1 = { nombre: \"Cris\", edad: 30, sueldo: 15000 };\nconsole.log(empleado1.edad);\n/* Intersección de datos: permite combinar dos o más tipos de datos en uno solo.\n*/\nlet empleado2;\nempleado2 = { edad: 29, fotocopia: 500, nombre: \"Maria\", sueldo: 1000 };\nconsole.log(empleado2);\n/***\n * Operadores de comparación:\n *\n * == -> compara el valor de la variable\n * === compara el valor de la variable + el tipo de datos\n */\n//Operador Ternario\n//condicion ? veradero : falso\nconsole.log(tarea1.estado == \"E\" ? `La tarea ${tarea1.nombre} se encuentra en ejecución` : `La tarea ${tarea1.nombre} no se ha ejecutado`);\n//Estructura if-else\nif (empleado1.edad == empleado2.edad) {\n    console.log(\"Ambos empleados tienen la misma edad\");\n}\nelse if (empleado1.edad > empleado2.edad) {\n    console.log(`${empleado1.nombre} es mayor que ${empleado2.nombre}`);\n}\nelse {\n    console.log(`${empleado1.nombre} es menor que ${empleado2.nombre}`);\n}\n//Switch\nswitch (tarea1.estado) {\n    case \"P\":\n        console.log(\"Tarea en pendiente\");\n        break;\n    case \"E\":\n        console.log(\"Tarea en proceso\");\n        break;\n    default:\n        console.log(\"Otro estado o no tiene estado\");\n        break;\n}\ntry {\n    let numero1 = 1;\n    console.log(numero1.toString());\n}\ncatch (error) {\n    console.log(\"Se ha producido un error al convertir un numero en String\", error);\n}\n//bucle\nlet listaTareasNuevas = [\n    {\n        nombre: \"Tarea 1\",\n        estado: EstadoTarea.Pendiente,\n        prioridad: 3\n    },\n    {\n        nombre: \"Tarea 2\",\n        estado: EstadoTarea.Enproceso,\n        prioridad: 0\n    },\n    {\n        nombre: \"Tarea 3\",\n        estado: EstadoTarea.Terminado,\n        prioridad: 1\n    },\n    {\n        nombre: \"Tarea 4\",\n        estado: EstadoTarea.Enproceso,\n        prioridad: 0\n    },\n    {\n        nombre: \"Tarea \",\n        estado: EstadoTarea.Terminado,\n        prioridad: 1\n    }\n];\n//FOREACH\nconsole.log(\"Esto es el resultado del foreach\");\nlistaTareasNuevas.forEach((tarea, index) => {\n    console.log(tarea, index);\n});\nconsole.log(\"-----------\");\n//FOR\nconsole.log(\"Esto es el resultado del for\");\nfor (let i = 0; i < listaTareasNuevas.length; i++) {\n    const tarea = listaTareasNuevas[i];\n    console.log(tarea);\n}\nconsole.log(\"-----------\");\n//Bucle While\nconsole.log(\"Esto es el resultado del while\");\nconsole.log(tarea1);\nwhile (tarea1.estado !== EstadoTarea.Terminado || tarea1.prioridad == 3) {\n    tarea1.estado = EstadoTarea.Terminado;\n}\nconsole.log(tarea1);\nconsole.log(\"-----------\");\n//bucle do while\nconsole.log(`La tarea 1 tiene prioridad: ${tarea1.prioridad}`);\ndo {\n    tarea1.prioridad++;\n} while (tarea1.prioridad > 5);\nconsole.log(`La tarea 1 tiene prioridad: ${tarea1.prioridad}`);\nconsole.log(\"-------------------\");\n//FUNCIONES\n/**\n * Muestra un saludo por consola a una persona\n * @param nombre string nombre del usuario\n *\n */\nfunction saludar(nombre) {\n    console.log(`Hola ${nombre}, ¿Qué tal estas?`);\n}\nsaludar(\"Cristina\");\n//Funciones con parámeros por defecto\n/**\n * Funcion que le entra un parametro nombre y lo muestra por consola\n * @param nombre string nombre predefinido\n */\nfunction saludarDefault(nombre = \"Cristina\") {\n    console.log(`Hola ${nombre}, ¿Qué tal estas?`);\n}\nsaludarDefault();\nsaludarDefault(\"Jose\");\nconsole.log(\"-----------\");\n//Funciones con parámeros opcionales\n/**\n * Funcion con parametro opcional\n * @param nombre\n */\nfunction saludarOpcional(nombre = \"Cristina\", apellido) {\n    let nombreParam = nombre;\n    if (apellido != undefined) {\n        console.log(`Hola ${nombreParam}${apellido}`);\n    }\n    else {\n        console.log(`Hola ${nombreParam}`);\n    }\n}\nsaludarOpcional(\"Cristina \", \"Bermudez\");\nsaludarOpcional();\nconsole.log(\"-----------------\");\n// Funciones con parámetros de varios tipos\n//El tipo de a es un \"tipo unión\", lo que \n//significa que puede ser de tipo string o de tipo number. \n//Es decir, a puede ser una cadena de texto o un número.\n//Aquí se usa typeof(a) para determinar si el valor de a es un string o un number.\nfunction variosTipos(a) {\n    if (typeof (a) == \"string\") {\n        console.log(\"a es un string\");\n    }\n    else {\n        console.log(\"a es un number\");\n    }\n}\nvariosTipos(1);\nvariosTipos(\"Hola\");\nconsole.log(\"----------\");\n// Función con retorno: return\nfunction suma(a, b) {\n    return a + b;\n}\nvar resultadoSuma = suma(1, 2);\nconsole.log(resultadoSuma);\nconsole.log(suma(1, 2));\nconst funcRestar = function (valor1, valor2) {\n    return valor1 - valor2;\n};\nconsole.log(`la resta de 5 - 2 es: ${funcRestar(5, 2)}`);\nconsole.log(\"----------\");\n//funciones anonimas\nlet fanonima = function () { console.log(\"Hola mundo\"); };\nfanonima();\nlet fitera = function (elementos, indice) {\n    console.log(`la tarea $${elementos.nombre} se encuentra en el elemento ${indice} del array`);\n};\nlistaTareasNuevas.forEach(fitera);\n/**\n * Funciones, rest parameters (parámetros rest)\n * Permite definir funciones que tomen un número indeterminado de argumentos\n */\nfunction multiParam(...nombres) {\n    nombres.forEach((nombre) => {\n        console.log(nombre);\n    });\n}\nmultiParam(\"Mateo\", \"Martin\");\n// A las funciones rest también se le puede pasar una lista de elementos\nlet listaNombres = [\"Angel\", \"Francisco\"];\nmultiParam(...listaNombres);\nfunction muestraUsuarios(...tareas) {\n    tareas.forEach(fitera);\n}\nmuestraUsuarios(tarea1, tarea2, tarea3);\nmuestraUsuarios(...listaTareasNuevas);\nconsole.log(\"-----------\");\n//variable que contiene una funcion, para que se pueda pasar una funcion a una variable tiene que se o anonima o arrow\nlet farrow = (tarea, indice) => { console.log(`${indice} - ${tarea.nombre}`); };\nfarrow(tarea1, 1);\nconsole.log(\"---------\");\nlistaTareasNuevas.forEach(farrow);\nconsole.log(\"---------\");\nlistaTareasNuevas.forEach((tarea) => { console.log(`${tarea.nombre}`); });\nlet getDatosTarea = (tarea) => { return `La tarea denominada ${tarea.nombre} cuyo estado es ${tarea.estado} tiene una prioridad ${tarea.prioridad} `; };\nconsole.log(getDatosTarea(tarea1));\n/**\n * Funciones CallBack\n * Una función callback es una función que se pasa a otra función como parámetro y dentro de la misma es llamada.\n * Hay que tener en cuenta que una función se trata como un objeto.\n */\n/*\n//Ejemplo 1:\nconst funcionMuestra = function (){\n    console.log(\"CallBack desde función estándar\");\n}\nsetTimeout(funcionMuestra,100); // La función timeout llama a funciónMuestra después de 100ms\n\n// Ejemplo 2: paso de una función anónima\nsetTimeout(function(){console.log(\"CallBack desde función anónima\")},1000);\n\n// Ejemplo 3: paso de una función flecha\n\nsetTimeout(()=>{console.log(\"CallBack desde función flecha\")},500);\n\n// Ejemplo 4:\n//let muestraDatos = function (a:string, b:number, c:string[]){\n  //  console.log(`Ejemplo 4 - ${a}`);\n//}\n\n//listaTareasNuevas.forEach(muestraDatos)\n\n//listaTareasNuevas.forEach((valor:string,indice:number,datos:string[]) => {\n  //  console.log(`${valor}, mostrado desde función CallBack fecha`)\n//})\n*/\nlet fsuma = function suma(a, b) {\n    return a + b;\n};\nlet fresta = function resta(a, b) {\n    return a - b;\n};\nfunction opera(x, y, funcion) {\n    return funcion(x, y);\n}\nopera(2, 3, fsuma);\nopera(2, 3, fresta);\n/**\n * FUNCIONES ASINCRONAS\n */\nfunction asincrona() {\n    return __awaiter(this, void 0, void 0, function* () {\n        let suma = 0;\n        for (let i = 0; i < 1000000; i++) {\n            suma += i;\n        }\n        return suma;\n    });\n}\nasincrona().then((data) => console.log(`El resultado de ejecutar asyc = ${data}`));\n//Metodos funciones asincronas\n//asincrona().then  -->\n//asincrona().catch  -->\n//asincrona().finally  -->\nconsole.log(\"Linea de codigo posterior a llamada asincrona\");\nfunction getUniversitiesAsync() {\n    return __awaiter(this, void 0, void 0, function* () {\n        let index = 0;\n        const apiURL = \"http://universities.hipolabs.com/search?country=\";\n        //Construimos la URL de la API a consultar concatenando el pais que se quiere filtrar\n        let url = `${apiURL}`;\n        // Con la función fetch accedemos hacemos una petición GET y obtenemos los resultados. \n        // Usamos await para indicar que hasta que no termine esta instrucción no se ejecuta la siguiente\n        let respuesta = yield fetch(url);\n        // Convertimos la respuesta de la petición GET en un archivo JSON\n        let datos = yield respuesta.json();\n        return datos;\n    });\n}\ngetUniversitiesAsync().then((data) => { console.log(data[0].name); });\nfunction getUniversitiesAsync02(pais) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let index = 0;\n        const apiURL = \"http://universities.hipolabs.com/search?country=\";\n        //Construimos la URL de la API a consultar concatenando el pais que se quiere filtrar\n        let url = `${apiURL}${pais}`;\n        // Con la función fetch accedemos hacemos una petición GET y obtenemos los resultados. \n        // Usamos await para indicar que hasta que no termine esta instrucción no se ejecuta la siguiente\n        let respuesta = yield fetch(url);\n        // Convertimos la respuesta de la petición GET en un archivo JSON\n        let datos = yield respuesta.json();\n        return datos;\n    });\n}\ngetUniversitiesAsync02(\"Spain\").then((data) => { console.log(data[1]); });\n/**\n * FUNCIONES GENERADORAS:\n * Una función generadora es una función que se puede pausar y reanudar, y por lo tanto, nos puede devolver múltiples valores.\n * Para poder declarar una función generadora es necesario añadir el * después de la palabra reservada function.\n * Observa que en lugar de llamar a return para devolver un valor, utilizamos yield.\n * Fuente:https://lenguajejs.com/javascript/funciones/generadores/\n */\nfunction* fGenTareas() {\n    let tareas = [...listaTareasNuevas];\n    for (let i in tareas) {\n        yield tareas[i];\n    }\n}\nlet funciongen = fGenTareas();\nconsole.log(funciongen.next());\n//ASYNC GENERADORA\nfunction* fgeneradora2() {\n    yield \"Hola\";\n    yield \"Mundo\";\n    yield \"IES\";\n}\nlet llamadafgen2 = fgeneradora2();\nlet str = llamadafgen2.next();\nwhile (str.done == false) {\n    console.log(str.value);\n    str = llamadafgen2.next();\n}\nllamadafgen2.next(); //hola\nllamadafgen2.next(); //mundo\nllamadafgen2.next(); //IES\nfunction obtenerDatosWeb() {\n    return __asyncGenerator(this, arguments, function* obtenerDatosWeb_1() {\n        let respuesta = yield __await(fetch(\"https://haveibeenpwned.com/api/v2/breaches\"));\n        // Convertimos la respuesta de la petición GET en un archivo JSON\n        let datos = yield __await(respuesta.json());\n        for (let i in datos) {\n            yield yield __await(datos[i]);\n        }\n        for (let index = 0; index < datos.length; index++) {\n            yield yield __await(datos[index]);\n        }\n    });\n}\nlet datosWebPage = obtenerDatosWeb();\ndatosWebPage.next().then(({ value, done }) => { console.log(`${value.Name} - ${value.Description}  \\n`); console.log(`Is the last element? ${done} \\n`); });\ndatosWebPage.next().then(({ value, done }) => { console.log(value.Name); });\nfunction saludarSobrecarga(nombre, apellido, edad) {\n    let saludo = `hola ${nombre}`;\n    if (apellido != undefined) {\n        saludo = saludo + `${apellido}`;\n    }\n    if (edad != undefined) {\n        saludo = saludo + `${edad}`;\n    }\n    return saludo;\n}\nconsole.log(saludarSobrecarga(\"Cristina\"));\n// Implementación de la función\nfunction funcionSobrecargaDiffParam(a, b) {\n    if (typeof a === \"string\" && typeof b === \"string\") {\n        return a + b;\n    }\n    else if (typeof a === \"number\" && typeof b === \"number\") {\n        return a + b;\n    }\n    throw new Error(\"Tipos de parámetros no coinciden\");\n}\nconsole.log(funcionSobrecargaDiffParam(\"Hola, \", \"mundo\")); // \"Hola, mundo\"\nconsole.log(funcionSobrecargaDiffParam(5, 10)); // 15\n//console.log(funcionSobrecargaDiffParam(\"Hola\", 10)); //ERROR\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[\"./src/index.ts\"](0, __webpack_exports__);\n",""],"names":[],"sourceRoot":""}